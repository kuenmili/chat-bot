{"code":"import { __decorate, __metadata } from \"tslib\";\nimport { LitElement, html, css } from \"lit\";\nimport { property } from \"lit/decorators.js\";\nimport { sendQuery } from \"../api\";\nexport class ChatWindow extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.history = [];\n        this.apiKey = \"\";\n        this.consultType = \"Consulta clínica\";\n        this.isTyping = false;\n    }\n    firstUpdated() {\n        // Mensaje de bienvenida\n        setTimeout(() => {\n            this.history = [\n                {\n                    from: \"bot\",\n                    text: \"Hola, soy Zentis, tu asistente médico. ¿En qué puedo ayudarte hoy?\",\n                },\n            ];\n        }, 500);\n    }\n    render() {\n        return html `\n      <div class=\"chat-container\">\n        ${this.history.length === 0\n            ? html `\n              <div class=\"empty-state\">\n                <div class=\"empty-icon\">💬</div>\n                <div class=\"empty-title\">Inicia una consulta</div>\n                <div class=\"empty-desc\">\n                  Escribe tu pregunta médica y te responderé al instante\n                </div>\n              </div>\n            `\n            : html `\n              <div class=\"messages\">\n                ${this.history.map((m) => html ` <div class=\"message ${m.from}\">${m.text}</div> `)}\n                ${this.isTyping\n                ? html `\n                      <div class=\"typing-indicator\">\n                        <div class=\"typing-dot\"></div>\n                        <div class=\"typing-dot\"></div>\n                        <div class=\"typing-dot\"></div>\n                      </div>\n                    `\n                : \"\"}\n              </div>\n            `}\n\n        <div class=\"input-container\">\n          <input\n            type=\"text\"\n            @keydown=${this._onKey}\n            placeholder=\"Escribe tu consulta médica...\"\n          />\n          <div class=\"send-button\" @click=${this._send}>➤</div>\n        </div>\n      </div>\n    `;\n    }\n    setConsultType(type) {\n        let message = \"\";\n        switch (type) {\n            case \"interaccion\":\n                message = \"Quiero consultar sobre interacciones farmacológicas\";\n                break;\n            case \"adversos\":\n                message = \"Necesito información sobre efectos adversos de medicamentos\";\n                break;\n            case \"patologia\":\n                message = \"Busco medicamentos recomendados para una patología\";\n                break;\n            default:\n                return;\n        }\n        this._sendMessageText(message);\n    }\n    _onKey(e) {\n        if (e.key === \"Enter\") {\n            this._send();\n        }\n    }\n    _scrollToBottom() {\n        // Pequeño delay para que exista el contenedor en DOM\n        setTimeout(() => {\n            const msgs = this.shadowRoot.querySelector(\".messages\");\n            if (msgs)\n                msgs.scrollTop = msgs.scrollHeight;\n        }, 50);\n    }\n    async _send() {\n        const input = this.shadowRoot.querySelector(\"input\");\n        const text = input.value.trim();\n        if (!text)\n            return;\n        // 1) Añadimos tu mensaje\n        this.history = [...this.history, { from: \"user\", text }];\n        input.value = \"\";\n        this.requestUpdate();\n        this._scrollToBottom();\n        // 2) Mostramos “typing”\n        this.isTyping = true;\n        this.requestUpdate();\n        // 3) Llamamos al backend\n        let botText;\n        try {\n            const payload = {\n                type: this.consultType.toLowerCase(),\n                message: text,\n            };\n            const response = await sendQuery(payload);\n            // Extraemos directamente response.output\n            botText = response.output ?? \"Lo siento, no hubo respuesta.\";\n        }\n        catch {\n            botText = \"Lo siento, ocurrió un error al procesar tu consulta.\";\n        }\n        // 4) Ocultamos “typing” y mostramos la respuesta\n        this.isTyping = false;\n        this.history = [...this.history, { from: \"bot\", text: botText }];\n        this.requestUpdate();\n        this._scrollToBottom();\n    }\n    // Dentro de tu ChatWindow, reemplaza completamente el método _sendMessageText por esto:\n    async _sendMessageText(text) {\n        this.history = [...this.history, { from: \"user\", text }];\n        this.isTyping = true;\n        this.requestUpdate();\n        // Scroll down\n        setTimeout(() => {\n            const msgs = this.shadowRoot.querySelector(\".messages\");\n            if (msgs)\n                msgs.scrollTop = msgs.scrollHeight;\n        }, 100);\n        try {\n            const payload = {\n                type: this.consultType.toLowerCase(),\n                message: text,\n            };\n            // Simula typing…\n            setTimeout(async () => {\n                let response;\n                try {\n                    response = await sendQuery(payload);\n                }\n                catch {\n                    response = {\n                        output: \"Lo siento, ha ocurrido un error. Intenta de nuevo.\",\n                    };\n                }\n                const botText = response.output ?? \"Lo siento, no hubo respuesta.\";\n                this.isTyping = false;\n                this.history = [...this.history, { from: \"bot\", text: botText }];\n                // Scroll again\n                setTimeout(() => {\n                    const msgs = this.shadowRoot.querySelector(\".messages\");\n                    if (msgs)\n                        msgs.scrollTop = msgs.scrollHeight;\n                }, 100);\n            }, 1500);\n        }\n        catch {\n            this.isTyping = false;\n            this.history = [\n                ...this.history,\n                {\n                    from: \"bot\",\n                    text: \"Lo siento, ha ocurrido un error procesando tu consulta.\",\n                },\n            ];\n        }\n    }\n}\nChatWindow.styles = css `\n    .chat-container {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n\n    .messages {\n      flex: 1;\n      overflow-y: auto;\n      padding: 16px 0;\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n\n    .message {\n      max-width: 85%;\n      padding: 12px 16px;\n      border-radius: 18px;\n      font-size: 14px;\n      line-height: 1.4;\n      position: relative;\n      animation: fadeIn 0.3s ease;\n    }\n\n    @keyframes fadeIn {\n      from {\n        opacity: 0;\n        transform: translateY(10px);\n      }\n      to {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    }\n\n    .user {\n      align-self: flex-end;\n      background-color: var(--primary-color);\n      color: white;\n      border-bottom-right-radius: 4px;\n    }\n\n    .bot {\n      align-self: flex-start;\n      background-color: white;\n      color: var(--text-color);\n      border-bottom-left-radius: 4px;\n      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n    }\n\n    .input-container {\n      margin-top: 10px;\n      position: relative;\n      background-color: white;\n      border-radius: 24px;\n      padding: 4px;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n      display: flex;\n      align-items: center;\n    }\n\n    input {\n      flex: 1;\n      padding: 12px 16px;\n      border: none;\n      border-radius: 24px;\n      font-size: 14px;\n      outline: none;\n      color: var(--text-color);\n    }\n\n    .send-button {\n      width: 36px;\n      height: 36px;\n      border-radius: 50%;\n      background-color: var(--primary-color);\n      color: white;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      cursor: pointer;\n      margin-right: 4px;\n      transition: all 0.2s ease;\n    }\n\n    .send-button:hover {\n      transform: scale(1.05);\n    }\n\n    .typing-indicator {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      padding: 8px 16px;\n      background-color: white;\n      border-radius: 18px;\n      align-self: flex-start;\n      margin-top: 8px;\n      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);\n    }\n\n    .typing-dot {\n      width: 8px;\n      height: 8px;\n      background-color: var(--light-text);\n      border-radius: 50%;\n      animation: typingAnimation 1.4s infinite ease-in-out;\n    }\n\n    .typing-dot:nth-child(1) {\n      animation-delay: 0s;\n    }\n    .typing-dot:nth-child(2) {\n      animation-delay: 0.2s;\n    }\n    .typing-dot:nth-child(3) {\n      animation-delay: 0.4s;\n    }\n\n    @keyframes typingAnimation {\n      0%,\n      60%,\n      100% {\n        transform: translateY(0);\n      }\n      30% {\n        transform: translateY(-5px);\n      }\n    }\n\n    .empty-state {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n      color: var(--light-text);\n      text-align: center;\n      padding: 20px;\n    }\n\n    .empty-icon {\n      font-size: 48px;\n      margin-bottom: 16px;\n      color: var(--primary-color);\n      opacity: 0.7;\n    }\n\n    .empty-title {\n      font-weight: 600;\n      font-size: 16px;\n      margin-bottom: 8px;\n      color: var(--text-color);\n    }\n\n    .empty-desc {\n      font-size: 14px;\n      max-width: 240px;\n      line-height: 1.4;\n    }\n  `;\n__decorate([\n    property({ type: Array }),\n    __metadata(\"design:type\", Array)\n], ChatWindow.prototype, \"history\", void 0);\n__decorate([\n    property({ type: String }),\n    __metadata(\"design:type\", Object)\n], ChatWindow.prototype, \"apiKey\", void 0);\n__decorate([\n    property({ type: String }),\n    __metadata(\"design:type\", Object)\n], ChatWindow.prototype, \"consultType\", void 0);\n__decorate([\n    property({ type: Boolean }),\n    __metadata(\"design:type\", Object)\n], ChatWindow.prototype, \"isTyping\", void 0);\ncustomElements.define(\"chat-window\", ChatWindow);\n//# sourceMappingURL=chat-window.js.map","references":["/home/mili/Desktop/chat-bot/node_modules/lit/index.d.ts","/home/mili/Desktop/chat-bot/node_modules/lit/decorators.d.ts","/home/mili/Desktop/chat-bot/src/api.ts"],"map":"{\"version\":3,\"file\":\"chat-window.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/components/chat-window.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/mili/Desktop/chat-bot/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/chat-window.d.ts","writeByteOrderMark":false,"text":"import { LitElement } from \"lit\";\nexport declare class ChatWindow extends LitElement {\n    static styles: import(\"lit\").CSSResult;\n    history: any[];\n    apiKey: string;\n    consultType: string;\n    isTyping: boolean;\n    firstUpdated(): void;\n    render(): import(\"lit-html\").TemplateResult<1>;\n    setConsultType(type: string): void;\n    private _onKey;\n    private _scrollToBottom;\n    private _send;\n    private _sendMessageText;\n}\n"}}
